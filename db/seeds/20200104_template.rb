Template.create!([
  {title: "バリデーションがまとまっていない", info: "バリデーションは「with_options」を使用することで、共通したオプションを付けることが可能となります。", input_summary_id: 1},
  {title: "<% if user_signed_in? %>の条件分岐が正しく設定されていない", info: "ログインしていないなら「新規登録」「ログイン」、ログインしていれば「ユーザー名」「ログアウト」が表示できるように条件分岐をしておくと良いでしょう。", input_summary_id: 1},
  {title: "<%= render 'shared/error_messages', model: f.object %>がコメントアウトされたまま", info: "このコードをコメントアウトのままにしておくと、ユーザー登録で失敗した際エラーメッセージが表示がされないはずです。したがってこのコードを使用できるようにしましょう！", input_summary_id: 1},
  {title: "presence: trueがない", info: "実装の条件に、「〇〇が必須であること」とあるので、 空白では出品できないようバリデーションを設定しましょう！", input_summary_id: 5},
  {title: "first_nameとlast_nameに format: { with: /\\A[ぁ-んァ-ン一-龥]+\\z/,がない", info: "実装の条件に、「全角（漢字・ひらがな・カタカナ）で入力させること」とあるので、正規表現をもちいてバリデーションを設定しましょう！", input_summary_id: 5},
  {title: "バリデーションがまとまっていない", info: "バリデーションは「with_options」を使用することで、共通したオプションを付けることが可能となります。", input_summary_id: 5},
  {title: "first_name_kanaとlast_name_kanaに format: { with: /\\A[\\p{katakana}　ー－&&[^ -~｡-ﾟ]]+\\z/がない", info: "実装の条件に、「ユーザー本名のフリガナは全角（カタカナ）で入力させること」とあるので、正規表現をもちいてバリデーションを設定しましょう！", input_summary_id: 5},
  {title: "テスト", info: "テスト", input_summary_id: 5},
  {title: "テスト", info: "テスト", input_summary_id: 5},
  {title: "aaa", info: "あああ", input_summary_id: 5},
  {title: "payjpのキーを直接記入している。", info: "こちらですが、payjpのキーに関しては、環境変数に定義して、 そこから呼び出すような仕組みにしましょう。 \r\nセキュリティの観点から見ても、githubにpushされるファイルに直接記述するのは好ましくありません。", input_summary_id: 6},
  {title: "createアクションに、エラーハンドリングが実装されていない場合", info: "こちら、失敗した時も、次の行が実行されてしまいます。 if文で条件分岐して、前の画面を表示するなどのエラーハンドリングをしておきましょう! \r\n※エラーハンドリングとは、プログラムの処理中正常に動かなかった場合に備え、その処理をエラーとして対処する処理のことです。", input_summary_id: 7},
  {title: "フォームオブジェクトに対して.valid?を使用せず、 .saveで実装している", info: "こちらフォームオブジェクトに対するsaveメソッドはActiveRecordで用意されているsaveメソッドとは異なります。 したがって、フォームオブジェクト内のsaveメソッドが動いた際に、そちらに記述しておりますModel.createが発火しエラーハンドリングが正常に機能しないことが考えられます。 valid?メソッドを使用し、バリデーションチェックに通るか通らないかでエラーハンドリングを行うように修正しましょう。", input_summary_id: 7},
  {title: "presence: trueがない", info: "実装の条件に、「〇〇が必須であること」とあるので、 空白では購入できないようバリデーションを設定しましょう！", input_summary_id: 8},
  {title: "validates :postal_code, format: { with: /\\A\\d{3}[-]\\d{4}\\z/ }がない", info: "実装の条件に、「郵便番号にはハイフンが必要であること」とあるので、 ハイフンをつけて購入しないといけないようにバリデーションを設定しましょう！", input_summary_id: 8},
  {title: "電話番号にはハイフンは不要で、11桁以内であることのバリデーションが不足している", info: "電話番号のバリデーションですが、ハイフンは不要で11桁以内でないと登録ができないように設定しましょう！", input_summary_id: 8},
  {title: "バリデーションの記述がまとまっていない", info: "バリデーションは「with_options」を使用することで、共通したオプションを付けることが可能となります。", input_summary_id: 8},
  {title: "SOLDOUTの条件分岐が行えていない", info: "商品の購入機能実装になりますので、SOLD OUTの表示の切り替えもビューファイル上で実装していきましょう！", input_summary_id: 9},
  {title: "詳細ページで出品者と購入者におけるリンクの分岐ができていない", info: "商品の購入機能実装になりますので、出品者は「編集」「削除」のボタン、購入者は「購入」のボタンがおせるようビューファイルを編集してあげましょう！", input_summary_id: 9},
  {title: "routes.rbでネストができていない", info: "こちら、itemは購入管理はアソシエーションを組んでいるため、ルーティングもネストさせてURLを生成するようにしましょう！", input_summary_id: 10},
  {title: "テストの検証が少ない", info: "テストの検証内容ですが、他にもいろんなパターンを考えてテストを行いましょう。 必要なテストは、タスク一覧の実装の条件にありますので、再確認してみましょう！ (例: 郵便番号にはハイフンが必要であること)", input_summary_id: 11},
  {title: "tokenのバリデーションがない", info: "tokenに対してもバリデーションを設定しましょう。\r\n\r\n理由 \r\ntokenが空でも購入出来てしまう場合、アプリケーションとして重大な欠陥が生じます。 具体的には、tokenが生成できていないということは入力したクレジットカード番号に誤りがある場合、もしくは使用不可能なカード番号が入力された場合です。 tokenに対してバリデーションが設定されていない場合、pay.jpで決済処理が行われないのにも関わらず、データベースのorderテーブルには「購入されたもの」としてその商品が登録されてしまいます。 監査を実施した際に、実際のデータと入金額にズレが発生することとなってしまいます。", input_summary_id: 8},
  {title: "user_idとitem_idのバリデーションがない", info: "user_id、item_idにもバリデーションpresence: trueを追加しましょう。\r\n【理由】\r\n\u2028今まではモデル間のアソシエーションを組むことで、自動的にpresence: trueが働いておりました。\r\n\u2028ただ、フォームオブジェクトでは直接アソシエーションを組んでいないためにバリデーションが必要となります。", input_summary_id: 8},
  {title: "電話番号のテストが足りない", info: "以下の3パターンに分けて異常系テストを実装しましょう。 \r\n・電話番号が必須であること \r\n・電話番号は11桁以内であること  \r\n・電話番号にはハイフンが不要であること          ", input_summary_id: 11},
  {title: "郵便番号のテストが足りない", info: "こちらは以下のように２つのパターンに分けてテストを実施しましょう。  \r\n・郵便番号が必須であること \r\n・郵便番号にはハイフンが必要であること \r\n理由 \r\nテストでは、設定した条件（バリデーション）１つ１つに対して実行する必要があるためです。", input_summary_id: 11},
  {title: "ログインしているユーザーと出品者の条件文がない", info: "こちらの記述では出品者以外が削除しようとした場合にエラーが出る可能性がございます。 以下のように修正しましょう！  if @item.user_id == current_user.id    @item.destroy end redirect_to :root", input_summary_id: 16},
  {title: "passwordカラムがある", info: "|      password    | string |       null: false       | \r\n行目のこちらのカラムはdeviseのgemを使用しての実装になるため、\r\ndeviseが予め用意している encrypted_passwordというカラムを用意してあげましょう。", input_summary_id: 12},
  {title: "active_hashを使用するカラム名の後ろに_idがついていない", info: "active_hashを使用した場合、「単数系カラム名_id」にしましょう。\r\n理由：「_id」がない場合、後にエラーになってしまう可能性が高くなるからです。", input_summary_id: 13},
  {title: "建物名にnull:falseが入っている", info: "|  building_name |  string  |   null: false   | \r\nbuilding_name（建物名のカラム）は登録が任意のため、null: false は不要になります。", input_summary_id: 15},
  {title: "imageカラムが存在する", info: "こちらのカラムですが、今回の実装では商品出品の画像投稿において「active_storage」を使用するため、設計の段階から削除しておきましょう。\r\n（理由はactive_storage導入時に自動でテーブルなどが生成されます）", input_summary_id: 13},
  {title: "card情報がある", info: "セキュリティの観点から、クレジットカードの情報はデータベースに直接保存しないようにしましょう。\r\n\r\nまた、今回のフリマアプリではカードを登録する際は購入の度に入力となり、データベースに記録しなくても良い情報となります。\r\nそのため、これらのカラムを削除しましょう。", input_summary_id: 15},
  {title: "ER図がない", info: "READMEに設計を記載するだけでなく、実装方針に「ER図を書く」とありますので、ER図の作成も同時に行いましょう！\r\n「ER図 便利ツール」とgoogle検索をかけると、色々作成に役立つ記事がヒットするので、ぜひ参考にしてみてください！", input_summary_id: 17},
  {title: "カードのテーブルが存在する", info: "今回開発するアプリでは、カードを登録する際は購入の度に入力するため、\r\nカードのテーブルを用意しなくても大丈夫です！", input_summary_id: 17},
  {title: " 外部キー制約を全てのカラムにつけている", info: "こちらのカラムに外部キー制約を貼る必要はありません。外部キー制約を削除しましょう！\r\n理由：外部キー制約は、テーブルの指定したカラムに格納できる値を他のテーブルに格納されている値だけに限定するものであるため、それに当てはまらないカラムにつける必要がないためです", input_summary_id: 17},
  {title: "カードの情報を入れるカラムがどこかのテーブルに存在する", info: "セキュリティの観点から、クレジットカードの情報はデータベースに直接保存しないようにしましょう。\r\n\r\n理由：今回のフリマアプリではカードを登録する際は購入の度に入力となり、データベースにわざわざ記録しなくても良い情報となります。したがってカラムを用意しなくても大丈夫です！", input_summary_id: 15},
  {title: "imageカラムやアソシエーション、imageテーブルが存在する", info: "こちらのカラムとテーブルですが、今回の実装では商品出品の画像投稿において「active_storage」を使用するため、設計の段階から削除しておきましょう。\r\n（理由はactive_storage導入時に自動でテーブルなどが生成されるからです）", input_summary_id: 13},
  {title: "reference型で実装、_idがカラムに付いている", info: "references 型で記述する際は、カラム名の_idは不要となります。\r\nもしカラム名で_idを使用する予定であれば、integer型を使用した方が良いでしょう。", input_summary_id: 17},
  {title: "動画がない", info: "以下の動画が不足しています。\r\nお手数おかけしますが正確なレビューをさせていただくために、以下の動画のご提出をお願い致します。\r\n\r\nログイン状態の出品者のみ、「編集・削除ボタン」が表示される動画\r\nログイン状態の出品者でも、売却済みの商品に対しては「編集・削除ボタン」が表示されない動画※購入機能が終わってからでもいい\r\nログイン状態の出品者以外のユーザーのみ、「購入画面に進むボタン」が表示される動画\r\nログアウト状態のユーザーでも、商品詳細表示ページを閲覧できる動画\r\nログアウト状態のユーザーには、「編集・削除・購入画面に進むボタン」が表示されない動画", input_summary_id: 18},
  {title: "性、名、フリガナを入れるカラムがない", info: "ユーザーの登録時、姓、名、姓（フリガナ）、名（フリガナ）と入力欄が細かく分かれているはずです。\r\nカラムは姓、名、姓（フリガナ）、名（フリガナ）とそれぞれ設計しましょう！", input_summary_id: 12},
  {title: "誕生日カラムがstring型やinteger型になっている", info: "今回の実装では、誕生日カラムは「date型」で設計した方が実装が簡単になると考えます。（date型は年、月、日を1つで指定して取得できるため）", input_summary_id: 12},
  {title: "誕生日カラムが年、月、日と別れている", info: "誕生日に関してですが、年、月、日を1つで指定して取得する方法があります。\r\n「rails date型」と調べてみると、ヒントが見つかりますので、一度調べてみましょう！", input_summary_id: 12},
  {title: "購入管理テーブルへのアソシエーションがhas_one, belongs_toなどになっている", info: "1人のユーザーが商品を複数回購入することができると想定すると、購入テーブルとのアソシエーションはhas_manyの使用が好ましいと考えます。", input_summary_id: 12},
  {title: "配送先住所とのアソシエーションが存在する", info: "今回の設計では「配送先住所は購入管理に紐づいている」というようにして実装を行なっていきたいので、ユーザーと配送先住所のアソシエーションは組まなくてもよいかと考えています。", input_summary_id: 12},
  {title: "商品説明を保存するカラムがstringになっている", info: "商品説明を保存するカラムは、説明が長くなることを仮定すると、text型で設計した方が無難かと考えます。", input_summary_id: 13},
  {title: "has_oneが複数形", info: "has_oneのアソシエーションを定義する場合は単数系にする必要があるため、\r\n「has_one :〇〇」に修正しましょう。", input_summary_id: 17},
  {title: "テストが足りない", info: "以下の異常系テストを追加しましょう！\r\nニックネーム：空の場合は登録できない\r\npassword：nil の場合は登録できない\r\npassword：5文字以下は登録できない\r\npassword：半角英語のみは登録できない\r\npassword：数字のみは登録できない\r\npassword：全角英数混合は登録できない\r\npassword_confirmation：passwordとpassword_confirmationが一致しない場合、登録できない\r\nemail：空の場合は登録できない\r\nemail：emailが被っていた場合は登録できない（一意性）\r\nemail：@がない場合は登録できない\r\n誕生日：空の場合は登録できない\r\n姓：空の場合は登録できない\r\n姓：全角（漢字・ひらがな・カタカナ）以外は登録できない←テストの値は半角英字で設定するのがオススメ\r\n名：空の場合は登録できない\r\n名：全角（漢字・ひらがな・カタカナ）以外は登録できない←テストの値は半角英字で設定するのがオススメ\r\n姓（フリガナ）：空の場合は登録できない\r\n姓（フリガナ）：全角（カタカナ）以外は登録できない\r\n名（フリガナ）：空の場合は登録できない\r\n名（フリガナ）：全角（カタカナ）以外は登録できない", input_summary_id: 4},
  {title: "issueで修正点を上げている場合", info: "レビュー依頼ありがとうございます。\r\n現状、プルリクエストが上がっていないため、レビューが行えません。\r\n\r\nそのためもしissue1〜3用のブランチを作成していない場合、\r\n新しくブランチを作成していただき、そのブランチ上でissue1〜3を修正してプルリクエストを出していただきたいです。\r\nその後、プルリクエストのurlをレビュー依頼フォームで送っていただきたいです。\r\nもしご不明点ございましたら、コネクトに質問していただけると幸いです。よろしくお願い致します。", input_summary_id: 21},
  {title: "商品一覧機能実装を先に進めてしまっている", info: "こちらのプルリクエストは「商品出品機能」でお間違いないでしょうか？\r\n上記の記述をこちらのプルリクエストで上げてしまうと、「商品一覧機能実装」のプルリクエストで修正差分が上がらないようになってしまいます。\r\nなので、コメントアウトをしておきましょう。", input_summary_id: 22},
  {title: "before_actionでまとめていない", info: "〇〇行目のbefore_actionの△△メソッドで@item = Item.find(params[:id])を定義しているため、■■行目は不要かと考えます。", input_summary_id: 16},
  {title: " レビュー終了時のコメント①", info: "レビュー依頼ありがとうございます！\r\nコメントしましたので、ご確認をお願いいたします！", input_summary_id: 24},
  {title: "レビュー終了時のコメント②", info: "レビュー依頼ありがとうございます！\r\n修正点確認させていただきました。\r\n追加でコメントいたしましたので、ご確認お願いします！", input_summary_id: 24},
  {title: "コンフリクト", info: "こちらのプルリクエストにて、コンフリクトが起きていますので、まずはこちらを解消してください！\r\ngithubのブラウザエディタでコンフリクトを解消できますので、「Resolve conflicts」をクリックして解消しましょう。\r\nその後、再度レビュー依頼フォームにてご提出をお願いします。", input_summary_id: 24},
  {title: "what,whyがない", info: "こちらのプルリクエストですが、プルリクエストにWhatとWhyが書かれていません。\r\nWhat（どのような実装をしているのか）と Why（なぜこの実装が必要なのか）を書くことで、\r\nこのブランチは何を実装していて、なぜその実装を行ったのかが他の人に伝えることができます。\r\nWhat をしっかり書くことで、他者にコードを見てもらう際に、スムーズな理解を促すことができ、Whyを書くことでなぜこの実装を行ったのか、本来の目的に沿ったレビュアーとのコミュニケーションが可能となります。\r\nお手数かけますが、記入後再度提出いただいたのち、再度レビュー依頼よりご提出をお願いします。", input_summary_id: 24},
  {title: "差分がない", info: "いただいたレビュー依頼ですが、修正点の差分があがっておりません。\r\nコミットとプッシュのし忘れを確認して修正点の差分を出して再度ご提出をお願いします！", input_summary_id: 24},
  {title: "LGTM①", info: "レビュー依頼ありがとうございます！\r\nLGTMとさせていただきます！実装お疲れ様でした！\r\n次は〇〇実装ですね！引き続き実装頑張っていきましょう！", input_summary_id: 25},
  {title: "LGTM②", info: "レビュー依頼ありがとうございます！\r\nLGTMとさせていただきます！実装お疲れ様でした！\r\nこの後、マージとプルだけ忘れずにお願い致します。", input_summary_id: 25},
  {title: "商品の状態, 配送料の負担, 発送元の地域,  発送までの日数, カテゴリーのカラムをstring型で実装している", info: "商品の状態, 配送料の負担, 発送元の地域,  発送までの日数, カテゴリーのカラムはactive_hashで実装の予定のため、integer型にしましょう！", input_summary_id: 13},
  {title: "商品の状態, 配送料の負担, 発送元の地域,  発送までの日数, カテゴリーなどのカラムが足りない", info: "商品のテーブルにて、出品時に必要なカラムがまだ足りないようです。\r\n見本アプリを参考に、〇〇を保存するカラムを設計しましょう！", input_summary_id: 13},
  {title: "都道府県のカラムが配送先住所テーブルで使っているものと別になっている", info: "Active_hashのデータは使い回すことができますので、配送先住所テーブルの都道府県カラムと同じものを使用しましょう。", input_summary_id: 13},
  {title: "sellerやbuyerを使用し、itemテーブルのみで購入管理を行う設計になっている", info: "sellerやbuyerといったカラムを用意し実装する方法は、実装の難易度を高めるだけでなく、今まで学習してこなかった内容で実装することになります。\r\n今回はsellerやbuyerを用意するのはひかえ、商品購入用のテーブルを用意、そのテーブルにuser_idやitem_idを保存し管理する設計してみてはいかがでしょうか？", input_summary_id: 13},
  {title: "購入管理テーブルへのアソシエーションがhas_many or belongs_toになっている", info: "今回の実装では「1つの商品は1つの購入履歴を持っている」という設計にしたいため、has_oneを使用してあげましょう！", input_summary_id: 13},
  {title: "belongs_to :userがない or hasになっている", info: "今回の実装では「1つの商品は1人のユーザーに属している」という設計にしたいため、belongs_toを使用してあげましょう！", input_summary_id: 13},
  {title: "配送先住所とのアソシエーションが存在する", info: "今回の設計では「配送先住所は購入管理に紐づいている」というようにして実装を行なっていきたいので、商品と配送先住所のアソシエーションは組まなくてもよいかと考えています。", input_summary_id: 13},
  {title: "user_idとitem_id以外のカラムが存在している。", info: "商品の購入管理はuserとitemのidのみで管理が可能です。\r\nしたがって、それ以外のカラムは今回は不要です！", input_summary_id: 14},
  {title: "購入管理のテーブルが存在しない", info: "商品は購入した後取引を行います、その際使用するのはuser_idとitem_idです！\r\nそれを管理するテーブルが必要ですので、設計してみましょう！", input_summary_id: 14},
  {title: "配送先住所へのアソシエーションが足りない", info: "購入情報は１つの住所を持っている設計にしたいので、has_oneでアソシエーションを住所テーブルと組みましょう！", input_summary_id: 14},
  {title: "belongs_to :item belongs_to :user has_one :address 以外のアソシエーションがある", info: "この購入管理テーブルとのアソシエーションは、user, item, そして配送先住所テーブルへのアソシエーションがあれば十分実装が可能と考えています。", input_summary_id: 14},
  {title: "本来ユーザーテーブルに加えるカラムが、配送先住所テーブルに記載している", info: "これらのカラムはユーザー登録時に保存させるため、ユーザーテーブルへ定義しましょう！", input_summary_id: 15},
  {title: "郵便番号のカラムがinteger型になっている ", info: "郵便番号はハイフンを必要とすることも考慮してstring型で実装しましょう！", input_summary_id: 15},
  {title: "電話番号のカラムがinteger型になっている", info: "電話番号のカラムはinteger型ではなく、string型で定義しましょう！\r\n理由：0はじまりの場合、数値型で定義しているとはじめの0が消えてしまうからです！", input_summary_id: 15},
  {title: "都道府県のカラムが商品テーブルで使っているものと別になっている", info: "Active_hashのデータは使い回すことができますので、商品テーブルの都道府県カラムと同じものを使用しましょう。", input_summary_id: 15},
  {title: "belongs_to :購入管理がhasになっている or 存在しない", info: "配送先住所の情報は、購入時に記録されます。\r\nそのため、購入のログを取る購入管理のテーブルと住所を紐づけることが好ましいです。\r\nその際、「配送先住所は1つの購入履歴に属している」という設計になるはずなので、belongs_toを使用してあげましょう！", input_summary_id: 15},
  {title: "belongs_to :購入管理以外のアソシエーションが存在する（ユーザー、商品とのアソシエーション）", info: "今回の設計では「配送先住所と購入管理が紐づく」実装を行なっていきたいので、商品やユーザーと配送先住所のアソシエーションは組まなくてもよいかと考えています。", input_summary_id: 15},
  {title: "アソシエーションの単数・複数に誤りがある", info: "このアソシエーションのコードですが、単数形・複数形を見直しましょう！", input_summary_id: 17},
  {title: "必要のないカラムが存在している時", info: "こちらのカラムは今回のアプリ開発では使用しませんので削除しておくと良いでしょう。", input_summary_id: 17},
  {title: "以下のテストも追加しましょう。", info: "image：画像がない場合は登録できない\r\nname：商品名がない場合は登録できない\r\ninfo：商品説明がない場合は登録できない\r\nprice：値段がない場合は登録できない\r\nprice：値段が全角数字の場合は登録できない\r\nprice：値段が299円以下の場合は登録できない\r\nprice：値段が10_000_000円以上の場合は登録できない  \r\ncategory_id：category_idが〇〇の場合は登録できない\r\nsales_status_id：sales_status_idが〇〇の場合は登録できない\r\nshipping_fee_status_id：shipping_fee_status_idが〇〇の場合は登録できない\r\nprefecture_id：prefecture_idが〇〇の場合は登録できない\r\nscheduled_delivery_id：scheduled_delivery_idが〇〇の場合は登録できない", input_summary_id: 23},
  {title: "建物名がない場合も登録出来る", info: "以下の正常系テストも追加しましょう。\r\n\r\n建物名がない場合も登録出来る", input_summary_id: 11},
  {title: "prefecture_idの0以外", info: "以下の異常系テストも追加しましょう！\r\n\r\nprefecture_idが0の場合は登録できない", input_summary_id: 11},
  {title: "tokenのテスト", info: "以下の異常系のテストを追加しましょう。\r\n\r\ntokenがない場合は登録できない", input_summary_id: 11},
  {title: "修正されていない箇所がある", info: "\r\n\r\nこちらは@itemを使用して〇〇を表示出来るように修正しましょう。", input_summary_id: 18},
  {title: "ログイン状態の出品者のみ、「編集・削除ボタン」が表示される", info: "ログイン状態の出品者のみ、「編集・削除ボタン」が表示されるような条件分岐を設定しましょう。", input_summary_id: 18},
  {title: "ログイン状態の出品者以外のユーザーのみ、「購入画面に進むボタン」が表示される", info: "ログイン状態の出品者以外のユーザーのみ、「購入画面に進むボタン」が表示されるような条件分岐を設定しましょう", input_summary_id: 18},
  {title: "ログアウト状態のユーザーには、「編集・削除・購入画面に進むボタン」が表示されない", info: "ログアウト状態のユーザーには、「編集・削除・購入画面に進むボタン」が表示されないように条件分岐を設定しましょう。", input_summary_id: 18},
  {title: "ログイン状態の出品者のみ、商品が削除できている状態ではない", info: "「ログイン状態の出品者のみ、商品が削除できている」ように条件文を設定しましょう。", input_summary_id: 16},
  {title: "商品のデータがない場合に、ダミー商品を表示する条件分岐がない", info: "商品のデータがない場合に、ダミー商品を表示出来るような条件分岐を設定しましょう。\r\nまたこちらの挙動を確認させていただきため、以下のキャプチャ動画もご提出よろしくお願い致します。\r\n\r\n・商品のデータがない場合に、ダミー商品が表示されている動画\r\n", input_summary_id: 26},
  {title: "降順ではない", info: "こちら、商品を全て表示するだけでなく、orderメソッドを用いて、出品した順に並び替えましょう！", input_summary_id: 26},
  {title: "表示できていない箇所がある", info: "こちらの〇〇が表示できていないようです。ブロック変数の■■を使用して〇〇を表示出来るようにしましょう。", input_summary_id: 26},
  {title: "余計なコメントアウトがある", info: "コメントアウトですが、不要であれば削除しましょう。\r\nもし必要であれば、第三者でもわかるように「残す目的」「なぜ必要か」という理由などを、コメントとして書いておくことをおすすめします。", input_summary_id: 24},
  {title: "passwordのFaker", info: "```\r\npassword              { Faker::Internet.password(min_length: 6) }\r\n```\r\nこちらの記述では、稀に「数字のみ」や「英字のみ」のパスワードが生成されてしまい、テストが失敗することが考えられます。\r\n英数字混合のpasswordを想定した上でFakerを使用する場合は、\r\n\r\n```\r\npassword              { '1a' + Faker::Internet.password(min_length: 6) }\r\nのように、確実にpasswordに英数字が含まれるように指定してあげましょう！\r\n```", input_summary_id: 4},
  {title: "不要なファイルを削除する", info: "こちらのspecファイルは使用されていないので削除しておきましょう！", input_summary_id: 4},
  {title: "まとめてテストしてしまっている", info: "1項目につきテストは1つが原則です。\r\nこちらは別々のテストとして切り出しましょう。", input_summary_id: 4},
  {title: "正常系と異常系のテストに分ける", info: "正常系と異常系のテストに分けた方が第三者から見ても分かりやすいテストになります。\r\n以下のように分けましょう。\r\n```\r\ncontext '内容に問題ない場合' do\r\n\r\nend\r\ncontext '内容に問題がある場合' do\r\n　\r\n　　~省略~\r\nend\r\n```", input_summary_id: 4},
  {title: "正常系と異常系のテストに分ける", info: "正常系と異常系のテストに分けた方が第三者から見ても分かりやすいテストになります。\r\n以下のように分けましょう。\r\n```\r\ncontext '内容に問題ない場合' do\r\n\r\nend\r\ncontext '内容に問題がある場合' do\r\n　\r\n　　~省略~\r\nend\r\n```", input_summary_id: 11},
  {title: "正常系と異常系のテストに分ける", info: "正常系と異常系のテストに分けた方が第三者から見ても分かりやすいテストになります。\r\n以下のように分けましょう。\r\n```\r\ncontext '内容に問題ない場合' do\r\n\r\nend\r\ncontext '内容に問題がある場合' do\r\n　\r\n　　~省略~\r\nend\r\n```", input_summary_id: 23},
  {title: "user_id,item_idのfactoryが正しくない", info: "```\r\nuser_id {2}\r\nitem_id {2}\r\n```\r\n外部キーを直接FactoryBotに記載するのはいい実装とは言えません。\r\n今回購入において商品やユーザーを用意する必要があるのであれば、\r\n〇〇_spec.rb のbefore内でuserやitemのFactoryBotから生成しましょう。\r\n\r\nご不明な点がありましたら、コネクトにてメンターにご相談ください！", input_summary_id: 11},
  {title: "before_action :authenticate_user!に書いていないアクションがある", info: "```\r\nbefore_action :authenticate_user!, only: [:new, :edit]\r\n```\r\nこちらはcreate,updateアクションも追加しておきたいため、「indexとshow以外」という指定に修正してはいかがでしょうか？\r\ncreate、update、destroyなど本来ログインしていなければボタン等も存在せず、たどり着かないと思われる処理にもかけておく理由は、\r\n検証ツールからボタンを表示させる、URLの直接入力をするといった不正なアクセスを防ぐためです。", input_summary_id: 27},
  {title: "string型の箇所がtextになっている", info: "text型にするほど長いものは想定されませんので、string型に変更しておきましょう！", input_summary_id: 15},
  {title: "マークダウンが崩れている", info: "| ------        | ------ | ----------- |\r\nこちらの上記の記述ですとマークダウンが崩れてしまいます。\r\n下記のように||の間に空白を作らずにハイフンを設定していただきたいです。\r\n他のテーブルも同じように空白があるため、確認してみましょう。\r\n\r\n|-----------|--------|-------------|", input_summary_id: 17},
  {title: "スネークケースなっていない", info: "```\r\ndef getweek\r\n```\r\nこちらはメソッド名ですので「小文字のスネークケース」にする必要があります。\r\nスネークケースは単語と単語の間をアンダースコアで繋ぐ形になるので、修正しましょう！", input_summary_id: 19},
  {title: "価格範囲テストの境界値ギリギリ", info: "70行目\r\n@item.payment = 10\r\n75行目\r\n@item.payment = 100000001\r\n・10は299\u2028・100000001は100000000\u2028に修正しましょう。\u2028理由：「価格が299円以下だと出品できない」「価格が100000000円以上だと出品できない」のテストに対して、境界値（ギリギリの値）で試す必要があるため\r\n", input_summary_id: 23},
  {title: "ダミー画像を表示させる条件分岐が不十分", info: "（例）\r\n<% if @items %>\r\n〇〇行目のこちらでは商品がない場合でもダミー画像が表示される可能性があります。\r\nlengthメソッドを使って配列の要素の数が0だとダミーを表示出来るように以下のように修正しましょう！\r\n\r\n<% if @items.length == 0%> ", input_summary_id: 26},
  {title: "presence: trueが重複している", info: "presence: trueが重複して使用しているため「with_options」を使用しましょう！\r\n（例）\r\n\r\nwith_options presence: true do\r\n   validates :image\r\n　〜省略〜\r\nend", input_summary_id: 28},
  {title: "価格の範囲のバリデーションがない", info: "実装の条件に、「価格の範囲が¥300~¥9,999,999の間であること」とあるので、\r\nこの条件に当てはまらない価格はバリデーションで弾くようにしましょう！", input_summary_id: 28},
  {title: "テーブル名＋カラム名になってしまっている", info: "```\r\n| items_name        | string    | null: false                    |\r\n```\r\nこちらのカラムですが、テーブル名からitemであることは第三者が見てもわかるので\r\n\u2028nameにしていただけると良いかと思います！\r\n\r\n\r\n", input_summary_id: 13}
])
